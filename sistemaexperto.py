# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vSzSz_uwQnAt9uf4HieY5Lt-rJdUV8zK
"""

###############INSTALACIÓN DE BIBLIOTECA STREAM##########
!pip install streamlit -q
!pip install pyngrok
#########################################################

# %% [markdown]
"""
# 🐻 Doctor Solución - Sistema Experto para Rinitis Alérgica

Este notebook contiene una aplicación completa de Streamlit diseñada para niños de 6-10 años
para aprender sobre rinitis alérgica de manera interactiva y gamificada.

## 🚀 Instrucciones de Uso en Google Colab:

1. **Ejecuta la celda de instalación** (Celda 1)
2. **Ejecuta la celda principal** (Celda 2)
3. **Ejecuta la celda de arranque** (Celda 3)
4. **Accede a la aplicación** usando el enlace que aparece

⚠️ **Importante**: Ejecuta las celdas en orden y espera a que cada una termine antes de continuar.
"""

# %% [code]
# Celda 1: Instalación de dependencias
print("🔧 Configurando entorno de Google Colab...")

# Instalar dependencias
!pip install streamlit -q
!pip install pyngrok -q

# Configurar ngrok para acceso público (opcional)
# Descomentar las siguientes líneas si quieres acceso público:
# !ngrok config add-authtoken TU_TOKEN_AQUI
# from pyngrok import ngrok

print("✅ Dependencias instaladas correctamente!")

# %% [code]

# Commented out IPython magic to ensure Python compatibility.
# # Celda 2: Código principal de la aplicación
# 
# %%writefile app.py
# import streamlit as st
# import sqlite3
# import pandas as pd
# from datetime import datetime, timedelta
# import json
# import time
# import sys
# import os
# 
# # Configuración de la página
# st.set_page_config(
#     page_title="🐻 Doctor Solución",
#     page_icon="🐻",
#     layout="wide",
#     initial_sidebar_state="expanded"
# )
# 
# # CSS personalizado para estilo infantil
# st.markdown("""
# <style>
#     .main {
#         padding: 1rem;
#         background: linear-gradient(135deg, #FFE5B4 0%, #E6F3FF 100%);
#     }
# 
#     .stButton > button {
#         background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
#         color: white;
#         border: none;
#         border-radius: 20px;
#         padding: 0.5rem 2rem;
#         font-size: 16px;
#         font-weight: bold;
#         box-shadow: 0 4px 8px rgba(0,0,0,0.2);
#         transition: transform 0.2s;
#     }
# 
#     .stButton > button:hover {
#         transform: scale(1.05);
#         box-shadow: 0 6px 12px rgba(0,0,0,0.3);
#     }
# 
#     .symptom-card {
#         background: white;
#         padding: 1.5rem;
#         border-radius: 15px;
#         box-shadow: 0 4px 6px rgba(0,0,0,0.1);
#         margin: 1rem 0;
#         border-left: 5px solid #FF6B6B;
#     }
# 
#     .diagnosis-result {
#         background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
#         color: white;
#         padding: 2rem;
#         border-radius: 20px;
#         text-align: center;
#         margin: 1rem 0;
#     }
# 
#     .achievement-badge {
#         background: gold;
#         color: #333;
#         padding: 0.5rem 1rem;
#         border-radius: 25px;
#         display: inline-block;
#         margin: 0.25rem;
#         font-weight: bold;
#         box-shadow: 0 2px 4px rgba(0,0,0,0.2);
#     }
# 
#     .mission-card {
#         background: #E8F5E8;
#         border: 2px solid #4CAF50;
#         border-radius: 15px;
#         padding: 1rem;
#         margin: 0.5rem 0;
#     }
# 
#     .colab-info {
#         background: #f0f8ff;
#         border: 2px solid #4CAF50;
#         border-radius: 10px;
#         padding: 1rem;
#         margin: 1rem 0;
#     }
# </style>
# """, unsafe_allow_html=True)
# 
# # Funciones para Google Colab
# def get_colab_db_path():
#     """Obtiene la ruta correcta para la base de datos en Colab"""
#     return '/content/doctor_solucion.db'
# 
# # Inicializar base de datos
# def init_db():
#     db_path = get_colab_db_path()
#     conn = sqlite3.connect(db_path, check_same_thread=False)
#     cursor = conn.cursor()
# 
#     # Tabla para usuarios
#     cursor.execute('''
#         CREATE TABLE IF NOT EXISTS usuarios (
#             id INTEGER PRIMARY KEY,
#             nombre TEXT,
#             edad INTEGER,
#             fecha_registro DATE
#         )
#      ''')
# 
#     # Tabla para diagnósticos
#     cursor.execute('''
#         CREATE TABLE IF NOT EXISTS diagnosticos (
#             id INTEGER PRIMARY KEY,
#             usuario_id INTEGER,
#             sintomas TEXT,
#             probabilidad REAL,
#             fecha DATE,
#             FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
#         )
#      ''')
# 
#     # Tabla para logros
#     cursor.execute('''
#         CREATE TABLE IF NOT EXISTS logros (
#             id INTEGER PRIMARY KEY,
#             usuario_id INTEGER,
#             tipo_logro TEXT,
#             fecha DATE,
#             FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
#         )
#       ''')
# 
#     conn.commit()
#     return conn
# 
# # Sistema de inferencia para diagnóstico
# class SistemaExperto:
#     def __init__(self):
#         self.reglas = {
#             'estornudos_frecuentes': 0.25,
#             'picazon_nariz': 0.20,
#             'ojos_rojos_llorosos': 0.20,
#             'congestion_nasal': 0.15,
#             'empeora_primavera': 0.15,
#             'reaccion_mascotas': 0.15,
#             'reaccion_polvo': 0.15,
#             'goteo_nasal': 0.10,
#             'fatiga': 0.05
#         }
# 
#     def diagnosticar(self, sintomas):
#         probabilidad = 0
#         factores_presentes = []
# 
#         for sintoma, peso in self.reglas.items():
#             if sintoma in sintomas:
#                 probabilidad += peso
#                 factores_presentes.append(sintoma)
# 
#         # Normalizar probabilidad (máximo 100%)
#         probabilidad = min(probabilidad, 1.0)
# 
#         return {
#             'probabilidad': probabilidad * 100,
#             'factores': factores_presentes,
#             'interpretacion': self._interpretar_resultado(probabilidad * 100)
#         }
# 
#     def _interpretar_resultado(self, prob):
#         if prob >= 70:
#             return "¡Alto! 🔴 Es muy probable que tengas rinitis alérgica."
#         elif prob >= 40:
#             return "¡Cuidado! 🟡 Podrías tener rinitis alérgica."
#         elif prob >= 20:
#             return "¡Atención! 🟠 Algunos síntomas coinciden."
#         else:
#             return "¡Tranquilo! 🟢 Pocos síntomas de rinitis alérgica."
# 
# # Inicializar sistema
# if 'db' not in st.session_state:
#     st.session_state.db = init_db()
# if 'sistema_experto' not in st.session_state:
#     st.session_state.sistema_experto = SistemaExperto()
# if 'usuario_actual' not in st.session_state:
#     st.session_state.usuario_actual = None
# if 'logros' not in st.session_state:
#     st.session_state.logros = []
# 
# # Funciones auxiliares
# def registrar_usuario(nombre, edad):
#     cursor = st.session_state.db.cursor()
#     cursor.execute(
#         "INSERT INTO usuarios (nombre, edad, fecha_registro) VALUES (?, ?, ?)",
#         (nombre, edad, datetime.now().date())
#     )
#     st.session_state.db.commit()
#     return cursor.lastrowid
# 
# def obtener_logros_usuario(usuario_id):
#     cursor = st.session_state.db.cursor()
#     cursor.execute("SELECT tipo_logro FROM logros WHERE usuario_id = ?", (usuario_id,))
#     return [row[0] for row in cursor.fetchall()]
# 
# def agregar_logro(usuario_id, tipo_logro):
#     cursor = st.session_state.db.cursor()
#     cursor.execute(
#         "INSERT INTO logros (usuario_id, tipo_logro, fecha) VALUES (?, ?, ?)",
#         (usuario_id, tipo_logro, datetime.now().date())
#     )
#     st.session_state.db.commit()
# 
# # Información específica para Google Colab
# st.markdown("""
# <div class="colab-info">
# <h4>🚀 Ejecutándose en Google Colab</h4>
# <p>Esta aplicación está optimizada para funcionar perfectamente en Google Colab.
# Los datos se almacenan de forma segura durante tu sesión.</p>
# </div>
# """, unsafe_allow_html=True)
# 
# # INTERFAZ PRINCIPAL
# st.title("🐻 ¡Hola! Soy Doctor Oso, tu amigo médico")
# st.markdown("### 🌟 Bienvenido a Doctor Solución - Tu aventura médica comienza aquí")
# 
# # Sidebar para navegación
# with st.sidebar:
#     st.markdown("### 🎮 Menú de Aventuras")
#     pagina = st.radio(
#         "¿A dónde quieres ir?",
#         ["🏠 Inicio", "🔍 Diagnóstico Mágico", "📚 Aprende Jugando", "💊 Guía para Papás", "🏆 Mis Logros"]
#     )
# 
#     # Información técnica para Colab
#     with st.expander("🔧 Info Técnica"):
#         st.write(f"📁 BD: {get_colab_db_path()}")
#         st.write(f"🟢 Estado: Conectado")
#         if st.button("🔄 Reiniciar BD"):
#             st.session_state.db = init_db()
#             st.success("✅ Base de datos reiniciada")
# 
# # PÁGINA DE INICIO
# if pagina == "🏠 Inicio":
#     col1, col2 = st.columns([2, 1])
# 
#     with col1:
#         st.markdown("### ¡Hola pequeño explorador! 👋")
#         st.markdown("""
#         Soy **Doctor Oso** 🐻 y estoy aquí para ayudarte a entender por qué a veces tu naricita
#         estornuda mucho o tus ojitos se ponen rojos. ¡Juntos vamos a descubrir si tienes
#         **rinitis alérgica**!
# 
#         ### 🎯 ¿Qué podemos hacer juntos?
#         - 🔍 **Diagnóstico Mágico**: Responde preguntas divertidas
#         - 📚 **Aprende Jugando**: Descubre qué es la rinitis alérgica
#         - 💊 **Guía para Papás**: Información para tus padres
#         - 🏆 **Mis Logros**: Colecciona insignias geniales
#         """)
# 
#     with col2:
#         st.markdown("### 🐻 Doctor Oso")
#         st.markdown("""
#         ```
#             ʕ•ᴥ•ʔ
#            /     \\
#           |  👩‍⚕️  |
#           |  🩺   |
#            \\     /
#             -----
#         ```
#         """)
# 
#     # Registro de usuario
#     #with st.expander("🎪 ¡Regístrate para la aventura!", expanded=True):
#         col1, col2 = st.columns(2)
#         with col1:
#             nombre = st.text_input("🌟 ¿Cómo te llamas?", placeholder="Escribe tu nombre aquí")
#         with col2:
#             edad = st.number_input("🎂 ¿Cuántos años tienes?", min_value=6, max_value=10, value=8)
# 
#         if st.button("🚀 ¡Comenzar mi aventura!"):
#             if nombre:
#                 usuario_id = registrar_usuario(nombre, edad)
#                 st.session_state.usuario_actual = {'id': usuario_id, 'nombre': nombre, 'edad': edad}
#                 agregar_logro(usuario_id, "Primera Aventura")
#                 st.success(f"¡Bienvenido {nombre}! 🎉 Ya puedes comenzar tu aventura médica.")
#                 st.balloons()
#             else:
#                 st.error("¡Necesito saber tu nombre para ser tu amigo médico! 😊")
# 
# # PÁGINA DE DIAGNÓSTICO
# elif pagina == "🔍 Diagnóstico Mágico":
#     if not st.session_state.usuario_actual:
#         st.warning("¡Primero regístrate en la página de Inicio! 🏠")
#         st.stop()
# 
#     st.markdown(f"### 🔮 ¡Hola {st.session_state.usuario_actual['nombre']}! Vamos a descubrir juntos")
# 
#     st.markdown("""
#     <div class="symptom-card">
#     <h4>🎯 Voy a hacerte algunas preguntas mágicas sobre cómo te sientes</h4>
#     <p>Responde con honestidad, ¡no hay respuestas incorrectas!</p>
#     </div>
#     """, unsafe_allow_html=True)
# 
#     sintomas_seleccionados = []
# 
#     # Preguntas sobre síntomas principales
#     st.markdown("#### 🤧 Sobre tu naricita y estornudos:")
# 
#     col1, col2 = st.columns(2)
#     with col1:
#         if st.checkbox("🤧 ¿Estornudas mucho durante el día?"):
#             sintomas_seleccionados.append('estornudos_frecuentes')
#         if st.checkbox("👃 ¿Te pica mucho la nariz?"):
#             sintomas_seleccionados.append('picazon_nariz')
#         if st.checkbox("🚫 ¿Se te tapa la nariz frecuentemente?"):
#             sintomas_seleccionados.append('congestion_nasal')
# 
#     with col2:
#         if st.checkbox("💧 ¿Te gotea mucho la nariz?"):
#             sintomas_seleccionados.append('goteo_nasal')
#         if st.checkbox("👀 ¿Se te ponen rojos o llorosos los ojos?"):
#             sintomas_seleccionados.append('ojos_rojos_llorosos')
#         if st.checkbox("😴 ¿Te sientes más cansado de lo normal?"):
#             sintomas_seleccionados.append('fatiga')
# 
#     # Preguntas sobre contexto/factores desencadenantes
#     st.markdown("#### 🌸 Sobre cuándo te sientes peor:")
# 
#     col1, col2 = st.columns(2)
#     with col1:
#         if st.checkbox("🌸 ¿Te sientes peor en primavera?"):
#             sintomas_seleccionados.append('empeora_primavera')
#         if st.checkbox("🐕 ¿Estornudas más cerca de mascotas?"):
#             sintomas_seleccionados.append('reaccion_mascotas')
# 
#     with col2:
#         if st.checkbox("🧹 ¿Te molesta el polvo en casa?"):
#             sintomas_seleccionados.append('reaccion_polvo')
# 
#     # Botón de diagnóstico
#     if st.button("🔮 ¡Hacer mi diagnóstico mágico!", type="primary"):
#         if sintomas_seleccionados:
#             resultado = st.session_state.sistema_experto.diagnosticar(sintomas_seleccionados)
# 
#             # Guardar diagnóstico
#             cursor = st.session_state.db.cursor()
#             cursor.execute(
#                 "INSERT INTO diagnosticos (usuario_id, sintomas, probabilidad, fecha) VALUES (?, ?, ?, ?)",
#                 (st.session_state.usuario_actual['id'],
#                  json.dumps(sintomas_seleccionados),
#                  resultado['probabilidad'],
#                  datetime.now().date())
#             )
#             st.session_state.db.commit()
# 
#             # Mostrar resultado
#             st.markdown(f"""
#             <div class="diagnosis-result">
#                 <h3>🎊 ¡Resultado de tu diagnóstico mágico!</h3>
#                 <h2>{resultado['interpretacion']}</h2>
#                 <p><strong>Probabilidad: {resultado['probabilidad']:.1f}%</strong></p>
#             </div>
#             """, unsafe_allow_html=True)
# 
#             # Consejos según resultado
#             if resultado['probabilidad'] >= 40:
#                 st.warning("""
#                 ### 👨‍⚕️ ¡Importante para tus papás!
#                 Los síntomas que describes podrían indicar rinitis alérgica.
#                 Es recomendable que tus papás te lleven con un doctor para
#                 confirmar el diagnóstico y recibir el mejor tratamiento.
#                 """)
#                 agregar_logro(st.session_state.usuario_actual['id'], "Detective de Síntomas")
#             else:
#                 st.success("""
#                 ### 🌟 ¡Qué bueno!
#                 No pareces tener muchos síntomas de rinitis alérgica,
#                 pero si te sientes mal, siempre es bueno hablar con un doctor.
#                 """)
# 
#             st.balloons()
#             agregar_logro(st.session_state.usuario_actual['id'], "Primera Consulta")
#         else:
#             st.error("¡Necesitas seleccionar al menos un síntoma para hacer el diagnóstico! 😊")
# 
# # PÁGINA EDUCATIVA
# elif pagina == "📚 Aprende Jugando":
#     st.markdown("### 🎓 ¡Vamos a aprender sobre la rinitis alérgica!")
# 
#     tab1, tab2, tab3 = st.tabs(["🤔 ¿Qué es?", "🗺️ Mapa de Alérgenos", "🎯 Misiones de Prevención"])
# 
#     with tab1:
#         st.markdown("#### 🌟 ¿Qué es la Rinitis Alérgica?")
# 
#         col1, col2 = st.columns([3, 1])
#         with col1:
#             st.markdown("""
#             Imagínate que tu naricita es como un **guardián súper protector** 🛡️.
#             Su trabajo es cuidarte de cosas que podrían hacerte daño.
# 
#             Pero a veces, este guardián se confunde y piensa que cosas inofensivas
#             como el **polen de las flores** 🌸 o el **pelo de los gatitos** 🐱
#             son enemigos peligrosos.
# 
#             ¡Entonces tu nariz empieza a estornudar y tus ojos se ponen llorosos
#             para "expulsar" a estos "invasores"! Pero en realidad, no son peligrosos.
# 
#             A esto le llamamos **rinitis alérgica** - cuando tu nariz reacciona
#             demasiado fuerte a cosas que normalmente no deberían molestarte.
#             """)
# 
#         with col2:
#             st.markdown("""
#             ### 🤧 Síntomas comunes:
#             - Estornudos 🤧
#             - Picazón en nariz 👃
#             - Ojos llorosos 👀💧
#             - Congestión nasal 🚫
#             """)
# 
#         if st.button("🏆 ¡Ya entendí qué es!"):
#             if st.session_state.usuario_actual:
#                 agregar_logro(st.session_state.usuario_actual['id'], "Pequeño Científico")
#                 st.success("¡Felicidades! Obtuviste la insignia de 'Pequeño Científico' 🏆")
# 
#     with tab2:
#         st.markdown("#### 🗺️ Mapa de los Alérgenos Misteriosos")
# 
#         col1, col2, col3 = st.columns(3)
# 
#         with col1:
#             st.markdown("""
#             <div class="mission-card">
#             <h5>🌸 Polen (Primavera)</h5>
#             <p>Las flores sueltan polvito amarillo que vuela por el aire</p>
#             <p><strong>Dónde:</strong> Parques, jardines</p>
#             <p><strong>Cuándo:</strong> Primavera y verano</p>
#             </div>
#             """, unsafe_allow_html=True)
# 
#         with col2:
#             st.markdown("""
#             <div class="mission-card">
#             <h5>🕷️ Ácaros del Polvo</h5>
#             <p>Bichitos súper pequeños que viven en el polvo</p>
#             <p><strong>Dónde:</strong> Camas, alfombras, cortinas</p>
#             <p><strong>Cuándo:</strong> Todo el año</p>
#             </div>
#             """, unsafe_allow_html=True)
# 
#         with col3:
#             st.markdown("""
#             <div class="mission-card">
#             <h5>🐕🐱 Mascotas</h5>
#             <p>Pelitos y caspa de perros y gatos</p>
#             <p><strong>Dónde:</strong> Casas con mascotas</p>
#             <p><strong>Cuándo:</strong> Todo el año</p>
#             </div>
#             """, unsafe_allow_html=True)
# 
#         if st.button("🕵️ ¡Ya conozco a los alérgenos!"):
#             if st.session_state.usuario_actual:
#                 agregar_logro(st.session_state.usuario_actual['id'], "Explorador de Alérgenos")
#                 st.success("¡Genial! Obtuviste la insignia de 'Explorador de Alérgenos' 🕵️")
# 
#     with tab3:
#         st.markdown("#### 🎯 Misiones Especiales de Prevención")
#

!ls

!npm install -g localtunnel

!streamlit run app.py & npx localtunnel --port 8501

!curl ipecho.net/plain

!ls